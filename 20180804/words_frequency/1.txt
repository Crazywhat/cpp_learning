cppreference.com

Search
Search
Create account
Page
Discussion
View
Edit
History
std::vector::vector
	C++  Containers library std::vector 
(1)	
	vector();
	explicit vector( const Allocator& alloc );
(until C++17)
	vector() noexcept(noexcept(Allocator()));
	explicit vector( const Allocator& alloc ) noexcept;
	(since C++17)
(2)	
	explicit vector( size_type count, 
			const T& value = T(),
			const Allocator& alloc = Allocator());
(until C++11)
	vector( size_type count, 
			const T& value,
			const Allocator& alloc = Allocator());
	(since C++11)
(3)	
	explicit vector( size_type count );
	(since C++11) 
(until C++14)
	explicit vector( size_type count, const Allocator& alloc = Allocator() );
(since C++14)
	template< class InputIt >
	vector( InputIt first, InputIt last, 
			const Allocator& alloc = Allocator() );
(4)	
	vector( const vector& other );
(5)	
	vector( const vector& other, const Allocator& alloc );
	(5)	(since C++11)
(6)	
	vector( vector&& other );
	(since C++11) 
(until C++17)
	vector( vector&& other ) noexcept;
(since C++17)
	vector( vector&& other, const Allocator& alloc );
(7)	(since C++11)
	vector( std::initializer_list<T> init, 
			const Allocator& alloc = Allocator() );
(8)	(since C++11)
	Constructs a new container from a variety of data sources, optionally using a user supplied allocator alloc.

	1) Default constructor. Constructs an empty container. If no allocator is supplied, allocator is obtained from a default-constructed instance.
	2) Constructs the container with count copies of elements with value value.
	3) Constructs the container with count default-inserted instances of T. No copies are made.
	4) Constructs the container with the contents of the range [first, last).
	This constructor has the same effect as vector(static_cast<size_type>(first), static_cast<value_type>(last), a) if InputIt is an integral type.	(until C++11)
This overload only participates in overload resolution if InputIt satisfies InputIterator, to avoid ambiguity with the overload (2).	(since C++11)
	5) Copy constructor. Constructs the container with the copy of the contents of other. If alloc is not provided, allocator is obtained as if by calling std::allocator_traits<allocator_type>::select_on_container_copy_construction(other.get_allocator()).
	6) Move constructor. Constructs the container with the contents of other using move semantics. Allocator is obtained by move-construction from the allocator belonging to other. After the move, other is guaranteed to be empty().
	7) Allocator-extended move constructor. Using alloc as the allocator for the new container, moving the contents from other; if alloc != other.get_allocator(), this results in an element-wise move. (in that case, other is not guaranteed to be empty after the move)
	8) Constructs the container with the contents of the initializer list init.
	Parameters
	alloc	-	allocator to use for all memory allocations of this container
	count	-	the size of the container
	value	-	the value to initialize elements of the container with
	first, last	-	the range to copy the elements from
	other	-	another container to be used as source to initialize the elements of the container with
	init	-	initializer list to initialize the elements of the container with
	Complexity
	1) Constant
	2-3) Linear in count
	4) Linear in distance between first and last
	5) Linear in size of other
	6) Constant.
	7) Linear if alloc != other.get_allocator(), otherwise constant.
	8) Linear in size of init.
	Exceptions
	Calls to Allocator::allocate may throw.

	Notes
	After container move construction (overload (6)), references, pointers, and iterators (other than the end iterator) to other remain valid, but refer to elements that are now in *this. The current standard makes this guarantee via the blanket statement in ยง23.2.1[container.requirements.general]/12, and a more direct guarantee is under consideration via LWG 2321. 
	The overload (3) zeroes out elements of non-class types such as int, which is different from the behavior of new[], which leaves them uninitialized. To match the behavior of new[], a custom Allocator::construct can be provided which leaves such elements uninitialized.

	Example
	Run this code
#include <vector>
#include <string>
#include <iostream>

	template<typename T>
	std::ostream& operator<<(std::ostream& s, const std::vector<T>& v) {
		s.put('[');
		char comma[3] = {'\0', ' ', '\0'};
		for (const auto& e : v) {
			s << comma << e;
			comma[0] = ',';
		}
		return s << ']';
	}

int main() 
{
	// c++11 initializer list syntax:
	std::vector<std::string> words1 {"the", "frogurt", "is", "also", "cursed"};
	std::cout << "words1: " << words1 << '\n';

	// words2 == words1
	std::vector<std::string> words2(words1.begin(), words1.end());
	std::cout << "words2: " << words2 << '\n';

	// words3 == words1
	std::vector<std::string> words3(words1);
	std::cout << "words3: " << words3 << '\n';

	// words4 is {"Mo", "Mo", "Mo", "Mo", "Mo"}
	std::vector<std::string> words4(5, "Mo");
	std::cout << "words4: " << words4 << '\n';
}
Output:

words1: [the, frogurt, is, also, cursed]
words2: [the, frogurt, is, also, cursed]
words3: [the, frogurt, is, also, cursed]
words4: [Mo, Mo, Mo, Mo, Mo]
